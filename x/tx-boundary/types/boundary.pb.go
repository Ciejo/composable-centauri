// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: centauri/txboundary/v1beta1/boundary.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Boundary defines the number of tx limit and block per tx generation time
type Boundary struct {
	Boundary            uint64 `protobuf:"varint,1,opt,name=boundary,proto3" json:"boundary,omitempty"`
	BlocksPerGeneration uint64 `protobuf:"varint,2,opt,name=blocks_per_generation,json=blocksPerGeneration,proto3" json:"blocks_per_generation,omitempty"`
}

func (m *Boundary) Reset()         { *m = Boundary{} }
func (m *Boundary) String() string { return proto.CompactTextString(m) }
func (*Boundary) ProtoMessage()    {}
func (*Boundary) Descriptor() ([]byte, []int) {
	return fileDescriptor_668b8d6584310f2c, []int{0}
}
func (m *Boundary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Boundary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Boundary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Boundary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Boundary.Merge(m, src)
}
func (m *Boundary) XXX_Size() int {
	return m.Size()
}
func (m *Boundary) XXX_DiscardUnknown() {
	xxx_messageInfo_Boundary.DiscardUnknown(m)
}

var xxx_messageInfo_Boundary proto.InternalMessageInfo

func (m *Boundary) GetBoundary() uint64 {
	if m != nil {
		return m.Boundary
	}
	return 0
}

func (m *Boundary) GetBlocksPerGeneration() uint64 {
	if m != nil {
		return m.BlocksPerGeneration
	}
	return 0
}

func init() {
	proto.RegisterType((*Boundary)(nil), "centauri.txboundary.v1beta1.Boundary")
}

func init() {
	proto.RegisterFile("centauri/txboundary/v1beta1/boundary.proto", fileDescriptor_668b8d6584310f2c)
}

var fileDescriptor_668b8d6584310f2c = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0x4e, 0xcd, 0x2b,
	0x49, 0x2c, 0x2d, 0xca, 0xd4, 0x2f, 0xa9, 0x48, 0xca, 0x2f, 0xcd, 0x4b, 0x49, 0x2c, 0xaa, 0xd4,
	0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34, 0xd4, 0x87, 0x09, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4,
	0x0b, 0x49, 0xc3, 0xd4, 0xea, 0x21, 0xd4, 0xea, 0x41, 0xd5, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7,
	0x83, 0xd5, 0xe9, 0x83, 0x58, 0x10, 0x2d, 0x52, 0x72, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa,
	0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x4a, 0x69, 0x51, 0x62, 0x49, 0x66, 0x7e, 0x1e, 0x54, 0x5e,
	0x1e, 0x5d, 0xbe, 0x24, 0x33, 0x37, 0xb5, 0xb8, 0x24, 0x31, 0xb7, 0x00, 0xa2, 0x40, 0x29, 0x8a,
	0x8b, 0xc3, 0x09, 0x6a, 0x95, 0x90, 0x14, 0x17, 0x07, 0xcc, 0x5a, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0x96, 0x20, 0x38, 0x5f, 0xc8, 0x88, 0x4b, 0x34, 0x29, 0x27, 0x3f, 0x39, 0xbb, 0x38, 0xbe, 0x20,
	0xb5, 0x28, 0x3e, 0x3d, 0x35, 0x2f, 0x15, 0x62, 0x8f, 0x04, 0x13, 0x58, 0xa1, 0x30, 0x44, 0x32,
	0x20, 0xb5, 0xc8, 0x1d, 0x2e, 0xe5, 0xa4, 0x7b, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0xc2, 0x15, 0xfa, 0x25, 0x15, 0xba, 0xf0, 0xf0, 0x28, 0xa9, 0x2c, 0x48, 0x2d, 0x4e,
	0x62, 0x03, 0xbb, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x60, 0xbc, 0x7c, 0x92, 0x33, 0x01,
	0x00, 0x00,
}

func (m *Boundary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Boundary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Boundary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlocksPerGeneration != 0 {
		i = encodeVarintBoundary(dAtA, i, uint64(m.BlocksPerGeneration))
		i--
		dAtA[i] = 0x10
	}
	if m.Boundary != 0 {
		i = encodeVarintBoundary(dAtA, i, uint64(m.Boundary))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBoundary(dAtA []byte, offset int, v uint64) int {
	offset -= sovBoundary(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Boundary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Boundary != 0 {
		n += 1 + sovBoundary(uint64(m.Boundary))
	}
	if m.BlocksPerGeneration != 0 {
		n += 1 + sovBoundary(uint64(m.BlocksPerGeneration))
	}
	return n
}

func sovBoundary(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBoundary(x uint64) (n int) {
	return sovBoundary(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Boundary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoundary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Boundary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Boundary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boundary", wireType)
			}
			m.Boundary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Boundary |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerGeneration", wireType)
			}
			m.BlocksPerGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerGeneration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBoundary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBoundary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBoundary(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBoundary
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoundary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBoundary
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBoundary
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBoundary
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBoundary        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBoundary          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBoundary = fmt.Errorf("proto: unexpected end of group")
)

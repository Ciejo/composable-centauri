// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: composable/transfermiddleware/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAddParachainInfo represents a message to add new parachain info.
type MsgAddParachainIBCTokenInfo struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	ChannelId   string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
	IbcDenom    string `protobuf:"bytes,3,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty" yaml:"ibc_denom"`
	NativeDenom string `protobuf:"bytes,4,opt,name=native_denom,json=nativeDenom,proto3" json:"native_denom,omitempty" yaml:"native_denom"`
	AssetId     string `protobuf:"bytes,5,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *MsgAddParachainIBCTokenInfo) Reset()         { *m = MsgAddParachainIBCTokenInfo{} }
func (m *MsgAddParachainIBCTokenInfo) String() string { return proto.CompactTextString(m) }
func (*MsgAddParachainIBCTokenInfo) ProtoMessage()    {}
func (*MsgAddParachainIBCTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_925cc3e4d71d1dc8, []int{0}
}
func (m *MsgAddParachainIBCTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddParachainIBCTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddParachainIBCTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddParachainIBCTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddParachainIBCTokenInfo.Merge(m, src)
}
func (m *MsgAddParachainIBCTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddParachainIBCTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddParachainIBCTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddParachainIBCTokenInfo proto.InternalMessageInfo

func (m *MsgAddParachainIBCTokenInfo) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddParachainIBCTokenInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgAddParachainIBCTokenInfo) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *MsgAddParachainIBCTokenInfo) GetNativeDenom() string {
	if m != nil {
		return m.NativeDenom
	}
	return ""
}

func (m *MsgAddParachainIBCTokenInfo) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

type MsgAddParachainIBCTokenInfoResponse struct {
}

func (m *MsgAddParachainIBCTokenInfoResponse) Reset()         { *m = MsgAddParachainIBCTokenInfoResponse{} }
func (m *MsgAddParachainIBCTokenInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddParachainIBCTokenInfoResponse) ProtoMessage()    {}
func (*MsgAddParachainIBCTokenInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_925cc3e4d71d1dc8, []int{1}
}
func (m *MsgAddParachainIBCTokenInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddParachainIBCTokenInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddParachainIBCTokenInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddParachainIBCTokenInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddParachainIBCTokenInfoResponse.Merge(m, src)
}
func (m *MsgAddParachainIBCTokenInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddParachainIBCTokenInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddParachainIBCTokenInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddParachainIBCTokenInfoResponse proto.InternalMessageInfo

// MsgRemoveParachainIBCTokenInfo represents a message to remove new parachain
// info.
type MsgRemoveParachainIBCTokenInfo struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	NativeDenom string `protobuf:"bytes,2,opt,name=native_denom,json=nativeDenom,proto3" json:"native_denom,omitempty" yaml:"ibc_denom"`
}

func (m *MsgRemoveParachainIBCTokenInfo) Reset()         { *m = MsgRemoveParachainIBCTokenInfo{} }
func (m *MsgRemoveParachainIBCTokenInfo) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveParachainIBCTokenInfo) ProtoMessage()    {}
func (*MsgRemoveParachainIBCTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_925cc3e4d71d1dc8, []int{2}
}
func (m *MsgRemoveParachainIBCTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveParachainIBCTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveParachainIBCTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveParachainIBCTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveParachainIBCTokenInfo.Merge(m, src)
}
func (m *MsgRemoveParachainIBCTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveParachainIBCTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveParachainIBCTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveParachainIBCTokenInfo proto.InternalMessageInfo

func (m *MsgRemoveParachainIBCTokenInfo) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRemoveParachainIBCTokenInfo) GetNativeDenom() string {
	if m != nil {
		return m.NativeDenom
	}
	return ""
}

type MsgRemoveParachainIBCTokenInfoResponse struct {
}

func (m *MsgRemoveParachainIBCTokenInfoResponse) Reset() {
	*m = MsgRemoveParachainIBCTokenInfoResponse{}
}
func (m *MsgRemoveParachainIBCTokenInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveParachainIBCTokenInfoResponse) ProtoMessage()    {}
func (*MsgRemoveParachainIBCTokenInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_925cc3e4d71d1dc8, []int{3}
}
func (m *MsgRemoveParachainIBCTokenInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveParachainIBCTokenInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveParachainIBCTokenInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveParachainIBCTokenInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveParachainIBCTokenInfoResponse.Merge(m, src)
}
func (m *MsgRemoveParachainIBCTokenInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveParachainIBCTokenInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveParachainIBCTokenInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveParachainIBCTokenInfoResponse proto.InternalMessageInfo

// MsgAddRlyAddress represents a message to add new rly address to allow list
type MsgAddRlyAddress struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority  string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	RlyAddress string `protobuf:"bytes,2,opt,name=rly_address,json=rlyAddress,proto3" json:"rly_address,omitempty" yaml:"rly_address"`
}

func (m *MsgAddRlyAddress) Reset()         { *m = MsgAddRlyAddress{} }
func (m *MsgAddRlyAddress) String() string { return proto.CompactTextString(m) }
func (*MsgAddRlyAddress) ProtoMessage()    {}
func (*MsgAddRlyAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_925cc3e4d71d1dc8, []int{4}
}
func (m *MsgAddRlyAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRlyAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRlyAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRlyAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRlyAddress.Merge(m, src)
}
func (m *MsgAddRlyAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRlyAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRlyAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRlyAddress proto.InternalMessageInfo

func (m *MsgAddRlyAddress) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddRlyAddress) GetRlyAddress() string {
	if m != nil {
		return m.RlyAddress
	}
	return ""
}

type MsgAddRlyAddressResponse struct {
}

func (m *MsgAddRlyAddressResponse) Reset()         { *m = MsgAddRlyAddressResponse{} }
func (m *MsgAddRlyAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRlyAddressResponse) ProtoMessage()    {}
func (*MsgAddRlyAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_925cc3e4d71d1dc8, []int{5}
}
func (m *MsgAddRlyAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRlyAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRlyAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRlyAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRlyAddressResponse.Merge(m, src)
}
func (m *MsgAddRlyAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRlyAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRlyAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRlyAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddParachainIBCTokenInfo)(nil), "composable.transfermiddleware.v1beta1.MsgAddParachainIBCTokenInfo")
	proto.RegisterType((*MsgAddParachainIBCTokenInfoResponse)(nil), "composable.transfermiddleware.v1beta1.MsgAddParachainIBCTokenInfoResponse")
	proto.RegisterType((*MsgRemoveParachainIBCTokenInfo)(nil), "composable.transfermiddleware.v1beta1.MsgRemoveParachainIBCTokenInfo")
	proto.RegisterType((*MsgRemoveParachainIBCTokenInfoResponse)(nil), "composable.transfermiddleware.v1beta1.MsgRemoveParachainIBCTokenInfoResponse")
	proto.RegisterType((*MsgAddRlyAddress)(nil), "composable.transfermiddleware.v1beta1.MsgAddRlyAddress")
	proto.RegisterType((*MsgAddRlyAddressResponse)(nil), "composable.transfermiddleware.v1beta1.MsgAddRlyAddressResponse")
}

func init() {
	proto.RegisterFile("composable/transfermiddleware/v1beta1/tx.proto", fileDescriptor_925cc3e4d71d1dc8)
}

var fileDescriptor_925cc3e4d71d1dc8 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x73, 0x09, 0x7f, 0x9a, 0x2b, 0x7f, 0x8a, 0x5b, 0xa8, 0xe5, 0x4a, 0x36, 0x3a, 0x54,
	0x54, 0x31, 0xd8, 0x4a, 0xa9, 0x54, 0x29, 0x0b, 0x6a, 0x80, 0x21, 0x48, 0x91, 0x90, 0xc5, 0xc4,
	0x12, 0x9d, 0x7d, 0x57, 0xc7, 0xc2, 0xf6, 0x45, 0x3e, 0x13, 0xea, 0x95, 0x8d, 0x09, 0xbe, 0x00,
	0x5f, 0x80, 0x09, 0x09, 0x89, 0xcf, 0xc0, 0xd8, 0x91, 0xc9, 0x42, 0xc9, 0xc0, 0x6e, 0xf1, 0x01,
	0x50, 0x7c, 0x8e, 0x1d, 0x12, 0xb0, 0x4a, 0x9b, 0x29, 0x77, 0x7a, 0xde, 0xdf, 0x7b, 0xcf, 0xf3,
	0xe6, 0x7c, 0x50, 0xb7, 0x99, 0x3f, 0x64, 0x1c, 0x5b, 0x1e, 0x35, 0xa2, 0x10, 0x07, 0xfc, 0x98,
	0x86, 0xbe, 0x4b, 0x88, 0x47, 0xdf, 0xe0, 0x90, 0x1a, 0xa3, 0x96, 0x45, 0x23, 0xdc, 0x32, 0xa2,
	0x13, 0x7d, 0x18, 0xb2, 0x88, 0x49, 0xbb, 0x65, 0xbd, 0xbe, 0x5c, 0xaf, 0xe7, 0xf5, 0xca, 0x96,
	0xc3, 0x1c, 0x96, 0x11, 0xc6, 0x74, 0x25, 0x60, 0x65, 0xdb, 0x66, 0xdc, 0x67, 0xdc, 0xf0, 0xb9,
	0x63, 0x8c, 0x5a, 0xd3, 0x1f, 0x21, 0xa0, 0xaf, 0x75, 0xb8, 0xd3, 0xe3, 0xce, 0x11, 0x21, 0xcf,
	0x71, 0x88, 0xed, 0x01, 0x76, 0x83, 0x6e, 0xe7, 0xf1, 0x0b, 0xf6, 0x8a, 0x06, 0xdd, 0xe0, 0x98,
	0x49, 0xfb, 0xb0, 0x89, 0x5f, 0x47, 0x03, 0x16, 0xba, 0x51, 0x2c, 0x83, 0xbb, 0x60, 0xaf, 0xd9,
	0xd9, 0x4a, 0x13, 0x6d, 0x23, 0xc6, 0xbe, 0xd7, 0x46, 0x85, 0x84, 0xcc, 0xb2, 0x4c, 0x3a, 0x80,
	0xd0, 0x1e, 0xe0, 0x20, 0xa0, 0x5e, 0xdf, 0x25, 0x72, 0x3d, 0x83, 0x6e, 0xa7, 0x89, 0x76, 0x4b,
	0x40, 0xa5, 0x86, 0xcc, 0x66, 0xbe, 0xe9, 0x12, 0xa9, 0x05, 0x9b, 0xae, 0x65, 0xf7, 0x09, 0x0d,
	0x98, 0x2f, 0x37, 0x16, 0x4f, 0x2a, 0x24, 0x64, 0xae, 0xb9, 0x96, 0xfd, 0x64, 0xba, 0x94, 0xda,
	0xf0, 0x5a, 0x80, 0x23, 0x77, 0x44, 0x73, 0xea, 0x52, 0x46, 0x6d, 0xa7, 0x89, 0xb6, 0x29, 0xa8,
	0x79, 0x15, 0x99, 0xeb, 0x62, 0x2b, 0x58, 0x1d, 0xae, 0x61, 0xce, 0x69, 0x34, 0xb5, 0x78, 0x39,
	0xe3, 0x36, 0xd3, 0x44, 0xbb, 0x99, 0xe7, 0xca, 0x15, 0x64, 0x5e, 0xcd, 0x96, 0x5d, 0xd2, 0xbe,
	0xf1, 0xf6, 0xe7, 0xe7, 0x07, 0x65, 0x48, 0xb4, 0x0b, 0xef, 0x55, 0xcc, 0xcd, 0xa4, 0x7c, 0xc8,
	0x02, 0x4e, 0xd1, 0x47, 0x00, 0xd5, 0x1e, 0x77, 0x4c, 0xea, 0xb3, 0x11, 0x5d, 0xdd, 0x88, 0x0f,
	0x17, 0x92, 0xd7, 0x2b, 0xe6, 0x35, 0x1f, 0x7b, 0x29, 0xc6, 0x1e, 0xbc, 0x5f, 0x6d, 0xaf, 0x48,
	0xf2, 0x1e, 0xc0, 0x0d, 0x91, 0xd8, 0xf4, 0xe2, 0x23, 0x42, 0x42, 0xca, 0xf9, 0x39, 0xbd, 0xaf,
	0x87, 0x5e, 0xdc, 0xc7, 0xa2, 0x45, 0x6e, 0xfd, 0x4e, 0x9a, 0x68, 0x92, 0xa0, 0xe6, 0x44, 0x64,
	0xc2, 0xb0, 0x38, 0x6c, 0xc9, 0xbb, 0x02, 0xe5, 0x45, 0x43, 0x33, 0xb7, 0xfb, 0xbf, 0x1a, 0xb0,
	0xd1, 0xe3, 0x8e, 0xf4, 0x09, 0x40, 0xf9, 0x9f, 0x97, 0xbb, 0xa3, 0x9f, 0xe9, 0x9b, 0xd2, 0x2b,
	0xfe, 0x68, 0xe5, 0xd9, 0xc5, 0x7b, 0xcc, 0x4c, 0x4b, 0x5f, 0x00, 0xdc, 0xa9, 0xba, 0x29, 0x4f,
	0xcf, 0x7e, 0x56, 0x45, 0x1b, 0xa5, 0xb7, 0x92, 0x36, 0x85, 0xeb, 0x77, 0x00, 0x5e, 0xff, 0xf3,
	0x56, 0x1c, 0xfe, 0xd7, 0x4c, 0x4a, 0x50, 0x79, 0x74, 0x4e, 0x70, 0xe6, 0xa5, 0x73, 0xf0, 0x6d,
	0xac, 0x82, 0xd3, 0xb1, 0x0a, 0x7e, 0x8c, 0x55, 0xf0, 0x61, 0xa2, 0xd6, 0x4e, 0x27, 0x6a, 0xed,
	0xfb, 0x44, 0xad, 0xbd, 0x54, 0x4e, 0xfe, 0xf6, 0xca, 0x46, 0xf1, 0x90, 0x72, 0xeb, 0x4a, 0xf6,
	0x16, 0x3e, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xfc, 0x30, 0x03, 0x93, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddParachainIBCTokenInfo(ctx context.Context, in *MsgAddParachainIBCTokenInfo, opts ...grpc.CallOption) (*MsgAddParachainIBCTokenInfoResponse, error)
	RemoveParachainIBCTokenInfo(ctx context.Context, in *MsgRemoveParachainIBCTokenInfo, opts ...grpc.CallOption) (*MsgRemoveParachainIBCTokenInfoResponse, error)
	AddRlyAddress(ctx context.Context, in *MsgAddRlyAddress, opts ...grpc.CallOption) (*MsgAddRlyAddressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddParachainIBCTokenInfo(ctx context.Context, in *MsgAddParachainIBCTokenInfo, opts ...grpc.CallOption) (*MsgAddParachainIBCTokenInfoResponse, error) {
	out := new(MsgAddParachainIBCTokenInfoResponse)
	err := c.cc.Invoke(ctx, "/composable.transfermiddleware.v1beta1.Msg/AddParachainIBCTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveParachainIBCTokenInfo(ctx context.Context, in *MsgRemoveParachainIBCTokenInfo, opts ...grpc.CallOption) (*MsgRemoveParachainIBCTokenInfoResponse, error) {
	out := new(MsgRemoveParachainIBCTokenInfoResponse)
	err := c.cc.Invoke(ctx, "/composable.transfermiddleware.v1beta1.Msg/RemoveParachainIBCTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRlyAddress(ctx context.Context, in *MsgAddRlyAddress, opts ...grpc.CallOption) (*MsgAddRlyAddressResponse, error) {
	out := new(MsgAddRlyAddressResponse)
	err := c.cc.Invoke(ctx, "/composable.transfermiddleware.v1beta1.Msg/AddRlyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddParachainIBCTokenInfo(context.Context, *MsgAddParachainIBCTokenInfo) (*MsgAddParachainIBCTokenInfoResponse, error)
	RemoveParachainIBCTokenInfo(context.Context, *MsgRemoveParachainIBCTokenInfo) (*MsgRemoveParachainIBCTokenInfoResponse, error)
	AddRlyAddress(context.Context, *MsgAddRlyAddress) (*MsgAddRlyAddressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddParachainIBCTokenInfo(ctx context.Context, req *MsgAddParachainIBCTokenInfo) (*MsgAddParachainIBCTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParachainIBCTokenInfo not implemented")
}
func (*UnimplementedMsgServer) RemoveParachainIBCTokenInfo(ctx context.Context, req *MsgRemoveParachainIBCTokenInfo) (*MsgRemoveParachainIBCTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveParachainIBCTokenInfo not implemented")
}
func (*UnimplementedMsgServer) AddRlyAddress(ctx context.Context, req *MsgAddRlyAddress) (*MsgAddRlyAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRlyAddress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddParachainIBCTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddParachainIBCTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddParachainIBCTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composable.transfermiddleware.v1beta1.Msg/AddParachainIBCTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddParachainIBCTokenInfo(ctx, req.(*MsgAddParachainIBCTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveParachainIBCTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveParachainIBCTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveParachainIBCTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composable.transfermiddleware.v1beta1.Msg/RemoveParachainIBCTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveParachainIBCTokenInfo(ctx, req.(*MsgRemoveParachainIBCTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRlyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRlyAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRlyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composable.transfermiddleware.v1beta1.Msg/AddRlyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRlyAddress(ctx, req.(*MsgAddRlyAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "composable.transfermiddleware.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddParachainIBCTokenInfo",
			Handler:    _Msg_AddParachainIBCTokenInfo_Handler,
		},
		{
			MethodName: "RemoveParachainIBCTokenInfo",
			Handler:    _Msg_RemoveParachainIBCTokenInfo_Handler,
		},
		{
			MethodName: "AddRlyAddress",
			Handler:    _Msg_AddRlyAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "composable/transfermiddleware/v1beta1/tx.proto",
}

func (m *MsgAddParachainIBCTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddParachainIBCTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddParachainIBCTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NativeDenom) > 0 {
		i -= len(m.NativeDenom)
		copy(dAtA[i:], m.NativeDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NativeDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddParachainIBCTokenInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddParachainIBCTokenInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddParachainIBCTokenInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveParachainIBCTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveParachainIBCTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveParachainIBCTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NativeDenom) > 0 {
		i -= len(m.NativeDenom)
		copy(dAtA[i:], m.NativeDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NativeDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveParachainIBCTokenInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveParachainIBCTokenInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveParachainIBCTokenInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRlyAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRlyAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRlyAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RlyAddress) > 0 {
		i -= len(m.RlyAddress)
		copy(dAtA[i:], m.RlyAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RlyAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRlyAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRlyAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRlyAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddParachainIBCTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NativeDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddParachainIBCTokenInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveParachainIBCTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NativeDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveParachainIBCTokenInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRlyAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RlyAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddRlyAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddParachainIBCTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddParachainIBCTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddParachainIBCTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddParachainIBCTokenInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddParachainIBCTokenInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddParachainIBCTokenInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveParachainIBCTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveParachainIBCTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveParachainIBCTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveParachainIBCTokenInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveParachainIBCTokenInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveParachainIBCTokenInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRlyAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRlyAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRlyAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RlyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RlyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRlyAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRlyAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRlyAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
